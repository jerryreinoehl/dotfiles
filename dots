#!/bin/bash
# =============================================================================
# dots
#
# usage: dots [--allyesconfig | --allnoconfig | --install [keys ... ]]
#
# Install dotfiles.
#
# positional arguments:
#   keys                  List of configs to install. If no keys are given then
#                         read keys from config file.
#
# options:
#   -y, --allyesconfig    Generate config with all options enabled.
#   -n, --allnoconfig     Generate config with all options disabled.
#   -i, --install         Install dotfiles.
#
# =============================================================================


declare -A configs

# Maps each config key to a `:` separated list of paths to install.
configs=(
  [ALACRITTY]=".config/alacritty/"
  [ALIASES]=".config/aliases"
  [BASH]=".bashrc"
  [DIRCOLORS]=".dircolors"
  [FONTCONFIG]=".config/fontconfig/"
  [GIT]=".config/git/"
  [GNUPG]=".config/gnupg/"
  [LIBVIRT]=".config/libvirt/"
  [LOCAL]=".local/"
  [NVIM]=".config/nvim/"
  [PICOM]=".config/picom/"
  [QTILE]=".config/qtile/"
  [TMUX]=".config/tmux/"
  [VIM]=".vim/"
  [X]=".xinitrc:.Xmodmap"
  [ZATHURA]=".config/zathura/"
  [ZSH]=".zshenv:.config/zsh/"
)

# Path to config file.
config="./config"


main() {
  local keys
  local -i should_install=0
  local REPLY

  case "$1" in
    -y|--allyesconfig) genconfig 1 > "$config" ;;
    -n|--allnoconfig) genconfig 0 > "$config" ;;
    -i|--install) should_install=1 ;;
    *) help ;;
  esac

  (( ! should_install )) && return

  shift
  keys=($@)

  # If no keys passed, read from config.
  (( ${#keys} == 0 )) && read_config_keys "$config" && keys=("${REPLY[@]}")

  install_dotfiles "${keys[@]}" || return 1
}


# Print help message.
help() {
  cat << EOF
usage: $0 [--allyesconfig | --allnoconfig | --install [keys ... ]]

Install dotfiles.

positional arguments:
  keys                  List of configs to install. If no keys are given then
                        read keys from config file.

options:
  -y, --allyesconfig    Generate config with all options enabled.
  -n, --allnoconfig     Generate config with all options disabled.
  -i, --install         Install dotfiles.
EOF
}


# Generates a config file for install.
#   $1 - Set to `1` to enable all options, `0` to disable.
genconfig() {
  local -i allyes="${1:-0}"
  local contents=""

  for key in "${!configs[@]}"; do
    (( ! allyes )) && contents+="#"
    contents+="$key\n"
  done

  # Remove extra newline
  contents="${contents%%\\n}"

  echo -e $contents | sort
}


# Reads config keys from config file and returns keys in ${REPLY[@]}.
#   $1 - Path of config file. Defaults to `config`.
read_config_keys() {
  local config="${1:-config}"
  local -a keys

  [[ ! -r "$config" ]] \
    && echo -e "\e[1;31mError: '$config' not found\e[0m" >&2 \
    && exit 1

  while read -r key; do
    [[ "${key:0:1}" == "#" ]] && continue
    keys+=("$key")
  done < "$config"

  REPLY=("${keys[@]}")
}


# Installs dotfiles.
#   $@ - List of config keys to install.
install_dotfiles() {
  local dest="$HOME"
  local keys=($@)
  local -i rc=0
  local IFS=":"

  for key in "${keys[@]}"; do
    key="${key^^}"

    echo -e "\e[1;32m==>\e[0m Installing $key"

    [[ -z "${configs[$key]}" ]] \
      && echo -e "\e[1;31mError: '$key' not found\e[0m" >&2 \
      && rc=1 \
      && continue

    for path in ${configs["$key"]}; do
      cp -rpT "$path" "$dest/$path"
    done
  done

  return $rc
}


main $@
